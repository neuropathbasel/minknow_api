# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from minknow_api import statistics_pb2 as minknow__api_dot_statistics__pb2


class StatisticsServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.stream_duty_time = channel.unary_stream(
        '/minknow_api.statistics.StatisticsService/stream_duty_time',
        request_serializer=minknow__api_dot_statistics__pb2.StreamDutyTimeRequest.SerializeToString,
        response_deserializer=minknow__api_dot_statistics__pb2.StreamDutyTimeResponse.FromString,
        )
    self.stream_acquisition_output = channel.unary_stream(
        '/minknow_api.statistics.StatisticsService/stream_acquisition_output',
        request_serializer=minknow__api_dot_statistics__pb2.StreamAcquisitionOutputRequest.SerializeToString,
        response_deserializer=minknow__api_dot_statistics__pb2.StreamAcquisitionOutputResponse.FromString,
        )
    self.stream_writer_output = channel.unary_stream(
        '/minknow_api.statistics.StatisticsService/stream_writer_output',
        request_serializer=minknow__api_dot_statistics__pb2.StreamWriterOutputRequest.SerializeToString,
        response_deserializer=minknow__api_dot_statistics__pb2.StreamWriterOutputResponse.FromString,
        )
    self.stream_encountered_acquisition_output_keys = channel.unary_stream(
        '/minknow_api.statistics.StatisticsService/stream_encountered_acquisition_output_keys',
        request_serializer=minknow__api_dot_statistics__pb2.StreamEncounteredAcquisitionOutputKeysRequest.SerializeToString,
        response_deserializer=minknow__api_dot_statistics__pb2.StreamEncounteredAcquisitionOutputKeysResponse.FromString,
        )
    self.stream_temperature = channel.unary_stream(
        '/minknow_api.statistics.StatisticsService/stream_temperature',
        request_serializer=minknow__api_dot_statistics__pb2.StreamTemperatureRequest.SerializeToString,
        response_deserializer=minknow__api_dot_statistics__pb2.StreamTemperatureResponse.FromString,
        )
    self.stream_bias_voltages = channel.unary_stream(
        '/minknow_api.statistics.StatisticsService/stream_bias_voltages',
        request_serializer=minknow__api_dot_statistics__pb2.StreamBiasVoltagesRequest.SerializeToString,
        response_deserializer=minknow__api_dot_statistics__pb2.StreamBiasVoltagesResponse.FromString,
        )
    self.stream_read_length_histogram = channel.unary_stream(
        '/minknow_api.statistics.StatisticsService/stream_read_length_histogram',
        request_serializer=minknow__api_dot_statistics__pb2.StreamReadLengthHistogramRequest.SerializeToString,
        response_deserializer=minknow__api_dot_statistics__pb2.StreamReadLengthHistogramResponse.FromString,
        )
    self.get_read_length_types = channel.unary_unary(
        '/minknow_api.statistics.StatisticsService/get_read_length_types',
        request_serializer=minknow__api_dot_statistics__pb2.GetReadLengthTypesRequest.SerializeToString,
        response_deserializer=minknow__api_dot_statistics__pb2.GetReadLengthTypesResponse.FromString,
        )
    self.stream_basecall_boxplots = channel.unary_stream(
        '/minknow_api.statistics.StatisticsService/stream_basecall_boxplots',
        request_serializer=minknow__api_dot_statistics__pb2.StreamBoxplotRequest.SerializeToString,
        response_deserializer=minknow__api_dot_statistics__pb2.BoxplotResponse.FromString,
        )


class StatisticsServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def stream_duty_time(self, request, context):
    """Tracks how much time has been spent in each channel state, aggregated across all the channels

    Since 4.0
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def stream_acquisition_output(self, request, context):
    """Tracks experiment output across various filters over time.

    The first response will give you all the data it can, and continue to provide updates
    if the acquisition period remains live.

    The stream will end once the current acquisition period ends, and a caller will need to
    reinvoke the rpc in order to get new data.

    Since 1.14
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def stream_writer_output(self, request, context):
    """Tracks experiment writes across all channels over time

    The first response will give you all the data it can.

    The stream will end once the current acquisition period ends, and a caller will need to
    reinvoke the rpc in order to get new data.

    Since 4.0
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def stream_encountered_acquisition_output_keys(self, request, context):
    """Tracks which barcode names have been encountered

    When a new barcode name is encountered, a list of all encountered barcode names is returned

    Since 4.0
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def stream_temperature(self, request, context):
    """Streams device temperature for a device. The first message will contain all of the temperatures up
    until the current live point, and then messages after that point will just be updates.

    Temperatures are averaged over a 1 minute period, and the value of each bucket is given in minute intervals

    Since 3.0
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def stream_bias_voltages(self, request, context):
    """Streams when bias voltage changes occur, where the response given will be the acquisition
    index that the voltage changed at, and the voltage itself. The first message will contain
    all of the bias voltage changes up until the current live point, and then messages after
    that period will just be updates

    Will fail with INVALID_ARGUMENT if an unknown acquisition id is given

    Since 3.2
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def stream_read_length_histogram(self, request, context):
    """A histogram of read lengths

    If the experiment is in-progress, then the latest histogram is streamed on a regular basis
    If the experiment is complete, then the final histogram is returned

    Since 4.0
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_read_length_types(self, request, context):
    """Gets a list of the types of read-length values for which a histogram is available

    Since 3.2
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def stream_basecall_boxplots(self, request, context):
    """Returns the qscore over time metric represented as datasets (i.e. boxplots).

    These metrics apply to all the successfully called reads.

    A dataset is a collection of quantiles (min, max, q50 etc - please see BoxplotDataset) recorded for
    a fixed period of time, say dt. dt is specified in the configs, and it defaults to 10 min.

    When acquisition starts, MinKNOW accumulates these stats for each dt interval. Each dt generates
    a dataset streamed by this rpc. The stream can request aggregated stats by averaging the stats from
    consecutive dt periods.

    Notes:

    Each streamed message will return ALL the datasets (i.e. boxplots) from the start of the experiment.

    When using this rpc, basecalling needs to be enabled.

    Since 4.0
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_StatisticsServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'stream_duty_time': grpc.unary_stream_rpc_method_handler(
          servicer.stream_duty_time,
          request_deserializer=minknow__api_dot_statistics__pb2.StreamDutyTimeRequest.FromString,
          response_serializer=minknow__api_dot_statistics__pb2.StreamDutyTimeResponse.SerializeToString,
      ),
      'stream_acquisition_output': grpc.unary_stream_rpc_method_handler(
          servicer.stream_acquisition_output,
          request_deserializer=minknow__api_dot_statistics__pb2.StreamAcquisitionOutputRequest.FromString,
          response_serializer=minknow__api_dot_statistics__pb2.StreamAcquisitionOutputResponse.SerializeToString,
      ),
      'stream_writer_output': grpc.unary_stream_rpc_method_handler(
          servicer.stream_writer_output,
          request_deserializer=minknow__api_dot_statistics__pb2.StreamWriterOutputRequest.FromString,
          response_serializer=minknow__api_dot_statistics__pb2.StreamWriterOutputResponse.SerializeToString,
      ),
      'stream_encountered_acquisition_output_keys': grpc.unary_stream_rpc_method_handler(
          servicer.stream_encountered_acquisition_output_keys,
          request_deserializer=minknow__api_dot_statistics__pb2.StreamEncounteredAcquisitionOutputKeysRequest.FromString,
          response_serializer=minknow__api_dot_statistics__pb2.StreamEncounteredAcquisitionOutputKeysResponse.SerializeToString,
      ),
      'stream_temperature': grpc.unary_stream_rpc_method_handler(
          servicer.stream_temperature,
          request_deserializer=minknow__api_dot_statistics__pb2.StreamTemperatureRequest.FromString,
          response_serializer=minknow__api_dot_statistics__pb2.StreamTemperatureResponse.SerializeToString,
      ),
      'stream_bias_voltages': grpc.unary_stream_rpc_method_handler(
          servicer.stream_bias_voltages,
          request_deserializer=minknow__api_dot_statistics__pb2.StreamBiasVoltagesRequest.FromString,
          response_serializer=minknow__api_dot_statistics__pb2.StreamBiasVoltagesResponse.SerializeToString,
      ),
      'stream_read_length_histogram': grpc.unary_stream_rpc_method_handler(
          servicer.stream_read_length_histogram,
          request_deserializer=minknow__api_dot_statistics__pb2.StreamReadLengthHistogramRequest.FromString,
          response_serializer=minknow__api_dot_statistics__pb2.StreamReadLengthHistogramResponse.SerializeToString,
      ),
      'get_read_length_types': grpc.unary_unary_rpc_method_handler(
          servicer.get_read_length_types,
          request_deserializer=minknow__api_dot_statistics__pb2.GetReadLengthTypesRequest.FromString,
          response_serializer=minknow__api_dot_statistics__pb2.GetReadLengthTypesResponse.SerializeToString,
      ),
      'stream_basecall_boxplots': grpc.unary_stream_rpc_method_handler(
          servicer.stream_basecall_boxplots,
          request_deserializer=minknow__api_dot_statistics__pb2.StreamBoxplotRequest.FromString,
          response_serializer=minknow__api_dot_statistics__pb2.BoxplotResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'minknow_api.statistics.StatisticsService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
